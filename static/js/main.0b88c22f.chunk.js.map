{"version":3,"sources":["App.js","index.js"],"names":["App","state","darkMode","whiteColor","blackColor","highlightLastMove","chess","Chess","files","a","b","c","d","e","f","g","h","squareColors","normal","darkSquare","lightSquare","dark","componentDidMount","canvas","document","querySelector","ctx","getContext","square","width","lineWidth","lineCap","fillBoard","rank","file","fillStyle","fillRect","height","drawPath","from","to","color","beginPath","strokeStyle","moveTo","x","y","lineTo","stroke","updateBoard","clearRect","history","verbose","moves","forEach","move","fromTo","addTo","push","concat","i","fromFile","fromRank","parseInt","fromFileNum","fromCoords","toFile","toRank","toFileNum","toCoords","length","arc","Math","PI","h1","header","pgn","t","ceil","trim","innerHTML","White","Black","Result","Date","innerText","handlePGN","value","load_pgn","setState","handleOtherChange","target","className","id","style","transform","this","flipped","cols","rows","placeholder","onChange","htmlFor","type","defaultChecked","checked","onClick","encodeURI","url","req","XMLHttpRequest","open","onload","res","readyState","status","console","log","warn","send","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0b88c22f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Chess from 'chess.js';\n\nclass App extends Component {\n  state = {\n    darkMode: false,\n    whiteColor: \"#81ebfd\",\n    blackColor: \"#d24b4b\",\n    highlightLastMove: true\n\n  }\n\n  render() { \n    return (\n      \n      <div className=\"wrapper\">\n        <h1></h1>\n        <p id=\"date\"></p>\n        <canvas width=\"560\" height=\"560\"\n          style={{\n            transform: this.state.flipped ? \"rotate(180deg)\" : \"\"\n          }}\n        ></canvas>\n        <p id=\"pgn\"></p>\n        <div className=\"controls\">\n          <textarea id=\"importGame\" cols=\"30\" rows=\"10\" placeholder=\"Input PGN\"\n            onChange={(e) => {this.handlePGN(e.target.value)}}\n          ></textarea>\n          <div className=\"row\">\n            <label htmlFor=\"whiteColor\">\n              White Color\n              <input value={this.state.whiteColor} type=\"color\" onChange={(e) => {this.handleOtherChange(e.target.value,'whiteColor')}}></input>\n            </label>\n            <label htmlFor=\"blackColor\">\n              Black color\n              <input value={this.state.blackColor} type=\"color\" onChange={(e) => {this.handleOtherChange(e.target.value,'blackColor')}}></input>\n            </label>\n            <label className=\"full\">\n              Dark mode?\n              <label className=\"switch\">\n                <input type=\"checkbox\" defaultChecked={this.state.darkMode} onChange={(e) => {this.handleOtherChange(e.target.checked,'darkMode')}} />\n                <span className=\"slider round\"></span>\n              </label>\n            </label>\n            <label className=\"full\">\n              Highlight Last move?\n              <label className=\"switch\">\n                <input type=\"checkbox\" defaultChecked={this.state.highlightLastMove} onChange={(e) => {this.handleOtherChange(e.target.checked,'highlightLastMove')}} />\n                <span className=\"slider round\"></span>\n              </label>\n            </label>\n            <div>\n              <button className=\"saveButton\" onClick={() => {\n                const pgn = encodeURI(this.chess.pgn());\n                const whiteColor = this.state.whiteColor;\n                const blackColor = this.state.blackColor;\n                const darkMode = this.state.darkMode;\n                const highlightLastMove = this.state.highlightLastMove;\n\n                const url = `http://localhost:8000/?pgn=${pgn}&whiteColor=${whiteColor}&blackColor=${blackColor}&darkMode=${darkMode}&highlightLastMove=${highlightLastMove}`;\n\n                const req = new XMLHttpRequest();\n\n                req.open('POST',url,true);\n\n                req.onload = (res) => {\n                  if(req.readyState === 4) {\n                    if(req.status === 200) {\n                      console.log(res);\n                    } else {\n                      console.warn(`There be errors about here`);\n                    }\n                  }\n                }\n                req.send();\n              }}>\n                Save design!\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  chess = new Chess();\n\n  files = {\n    a:0,\n    b:1,\n    c:2,\n    d:3,\n    e:4,\n    f:5,\n    g:6,\n    h:7\n}\n\nsquareColors = {\n  normal: {\n    darkSquare: \"#888\",\n    lightSquare: \"#eee\"\n  },\n  dark: {\n    darkSquare: \"#000\",\n    lightSquare: \"#4a4a4a\"\n  }\n}\n\n  componentDidMount = () => {\n    this.canvas = document.querySelector('canvas');\n    this.ctx = this.canvas.getContext('2d');\n\n    this.square = this.canvas.width/8;\n    this.ctx.lineWidth = this.square*0.065;\n    this.ctx.lineCap = \"round\";\n\n    this.fillBoard();\n\n    document.chess = this.chess;\n\n  }\n\n  fillBoard = () => {\n    let rank = 1;\n    while(rank < 9) {\n        let file = 0;\n        while(file < 8) {\n            if(rank % 2 !== 0) {\n                if(file % 2 === 0) {\n                    this.ctx.fillStyle = this.state.darkMode ? this.squareColors.dark.darkSquare : this.squareColors.normal.darkSquare;\n                    this.ctx.fillRect(file*this.square,this.canvas.height-(this.square*rank),this.square,this.square);\n                } else {\n                    this.ctx.fillStyle = this.state.darkMode ? this.squareColors.dark.lightSquare : this.squareColors.normal.lightSquare;\n                    this.ctx.fillRect(file*this.square,this.canvas.height-(this.square*rank),this.square,this.square);\n                }\n            } else {\n                if(file % 2 !== 0) {\n                    this.ctx.fillStyle = this.state.darkMode ? this.squareColors.dark.darkSquare : this.squareColors.normal.darkSquare;\n                    this.ctx.fillRect(file*this.square,this.canvas.height-(this.square*rank),this.square,this.square);\n                } else {\n                    this.ctx.fillStyle = this.state.darkMode ? this.squareColors.dark.lightSquare : this.squareColors.normal.lightSquare;\n                    this.ctx.fillRect(file*this.square,this.canvas.height-(this.square*rank),this.square,this.square);\n                }\n            }\n            file++;\n        }\n        rank++;\n    }\n}\n\ndrawPath = (from,to,color) => {\n\n  this.ctx.beginPath();\n\n  this.ctx.strokeStyle = (color === 'w' ? this.state.whiteColor : this.state.blackColor);\n  this.ctx.moveTo(from.x,from.y);\n  this.ctx.lineTo(to.x,to.y);\n  this.ctx.stroke();\n}\n\nupdateBoard = () => {\n  this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);\n  this.fillBoard();\n  \n  const history = this.chess.history({verbose:true});\n\n  let moves = [];\n\n  history.forEach(move => {\n    let fromTo = {\n        from: move.from,\n        to: move.to,\n        color: move.color\n    }\n    let addTo = [];\n    addTo.push(fromTo);\n\n    moves = moves.concat(addTo);\n\n  });\n\n  moves.forEach((move,i) => {\n      let from = move.from;\n      let to = move.to;\n      \n      let fromFile = from[0];\n      let fromRank = parseInt(from[1])-1;\n      let fromFileNum = this.files[fromFile];\n      \n      let fromCoords = {\n          x: (this.square/2)+(this.square*fromFileNum),\n          y: this.canvas.height-this.square/2 - (this.square*fromRank)\n      }\n\n      let toFile = to[0];\n      let toRank = parseInt(to[1])-1;\n      let toFileNum = this.files[toFile];\n\n      let toCoords = {\n          x: (this.square/2)+(this.square*toFileNum),\n          y: this.canvas.height-(this.square/2) - (this.square*toRank)\n      };\n      \n      this.drawPath(fromCoords,toCoords,move.color);\n\n      if(i === moves.length-1 && this.state.highlightLastMove) {\n        this.ctx.beginPath();\n        this.ctx.arc(toCoords.x,toCoords.y,this.square/8,0,2*Math.PI);\n        this.ctx.stroke();\n      }\n  });\n  \n\n  let h1 = document.querySelector('h1');\n  let header = this.chess.header();\n\n  let pgn = \"\";\n  (this.chess.history()).forEach((t,i) => {\n      if(i % 2 === 0) {\n          pgn += (\"<b>\" + (Math.ceil(i/2)+1) + \".</b>&nbsp;\");\n      }\n  \n      pgn += t + \" \";\n  });\n  pgn.trim();\n\n  const pgnPlace = document.querySelector('#pgn');\n  pgnPlace.innerHTML = pgn;\n\n  if(header.White && header.Black) {\n      h1.innerHTML = `${header.White} vs ${header.Black}${header.Result ? \" <span class='score'>\" + header.Result + \"</span>\": \"\"}`;\n\n      if(header.Date) {\n          let date = document.querySelector('#date');\n          date.innerText = `${header.Date}`;\n      }\n  }\n}\n\nhandlePGN = (value) => {\n    const res = this.chess.load_pgn(value);\n\n    if(res) {\n      this.setState({\n        pgn: value\n      }, () => {\n        this.updateBoard();\n      });\n    }\n  }\n\n  handleOtherChange = (value,target) => {\n    this.setState({\n      [target]: value\n    }, () => {\n      this.updateBoard();\n    });\n  }\n}\n \nexport default App;\n\n/** The Reacty Way\n * Accept PGN input and load it into this.chess, then this.state.pgn to value\n * In callback, call this.drawLines(), which should operate agnostic to input so you can call it whenever ANYTHING changes (colors or PGN).\n * \n * Sample \n */","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}