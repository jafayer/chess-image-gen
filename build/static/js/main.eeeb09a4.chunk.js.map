{"version":3,"sources":["components/controls.jsx","components/messages.jsx","App.js","index.js","resources/generator.js"],"names":["Controls","state","saveToServer","document","querySelector","disabled","body","pgn","props","chess","whiteColor","blackColor","darkMode","highlightLastMove","req","XMLHttpRequest","open","setRequestHeader","onload","readyState","status","response","JSON","parse","console","log","handleOtherChange","id","localSetter","warn","send","stringify","className","cols","rows","placeholder","onChange","e","handlePGN","target","value","htmlFor","this","type","defaultChecked","checked","onClick","Component","Messages","copyToClipboard","window","navigator","clipboard","url","fetchedID","writeText","then","App","Chess","files","a","b","c","d","f","g","h","squareColors","normal","darkSquare","lightSquare","dark","componentDidMount","canvas","ctx","getContext","square","width","lineWidth","lineCap","generator","fillBoard","path","location","pathname","slice","localViewed","localGetter","localCreated","loadGame","setState","fetchingGame","fetchFromServer","json","err","error","load_pgn","headers","header","fetchedGame","white","White","black","Black","result","Result","updateBoard","fetch","res","catch","callback","message","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","local","localStorage","getItem","filter","obj","setItem","push","height","style","transform","flipped","history","map","elem","i","Math","ceil","ReactDOM","render","StrictMode","getElementById","rank","file","fillStyle","fillRect","drawPath","from","to","color","beginPath","strokeStyle","moveTo","x","y","lineTo","stroke","module","exports","clearRect","verbose","moves","forEach","move","fromTo","addTo","concat","fromFile","fromRank","parseInt","fromFileNum","fromCoords","toFile","toRank","toFileNum","toCoords","length","arc","PI"],"mappings":"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","file":"static/js/main.eeeb09a4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Controls extends Component {\r\n    state = {  }\r\n    render() { \r\n        return (\r\n            <div className=\"controls\">\r\n                <textarea id=\"importGame\" cols=\"30\" rows=\"10\" placeholder=\"Input PGN\"\r\n                            onChange={(e) => {this.props.handlePGN(e.target.value)}}\r\n                        ></textarea>\r\n                <div className=\"row\">\r\n                    <label htmlFor=\"whiteColor\">\r\n                    White Color\r\n                    <input value={this.props.whiteColor} type=\"color\" onChange={(e) => {this.props.handleOtherChange(e.target.value,'whiteColor')}}></input>\r\n                    </label>\r\n                    <label htmlFor=\"blackColor\">\r\n                    Black color\r\n                    <input value={this.props.blackColor} type=\"color\" onChange={(e) => {this.props.handleOtherChange(e.target.value,'blackColor')}}></input>\r\n                    </label>\r\n                    <label className=\"full\">\r\n                    Dark mode?\r\n                    <label className=\"switch\">\r\n                        <input type=\"checkbox\" defaultChecked={this.props.darkMode} onChange={(e) => {this.props.handleOtherChange(e.target.checked,'darkMode')}} />\r\n                        <span className=\"slider round\"></span>\r\n                    </label>\r\n                    </label>\r\n                    <label className=\"full\">\r\n                    Highlight Last move?\r\n                    <label className=\"switch\">\r\n                        <input type=\"checkbox\" defaultChecked={this.props.highlightLastMove} onChange={(e) => {this.props.handleOtherChange(e.target.checked,'highlightLastMove')}} />\r\n                        <span className=\"slider round\"></span>\r\n                    </label>\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <button className=\"saveButton\" onClick={this.saveToServer}>\r\n                        Save design!\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    saveToServer = () => {\r\n        let saveButton = document.querySelector('.saveButton');\r\n        saveButton.disabled = true;\r\n        const pgn = this.props.chess.pgn();\r\n        const whiteColor = this.props.whiteColor;\r\n        const blackColor = this.props.blackColor;\r\n        const darkMode = this.props.darkMode ? 1 : 0;\r\n        const highlightLastMove = this.props.highlightLastMove ? 1 : 0;\r\n    \r\n        let body = {\r\n          pgn: pgn,\r\n          whiteColor: whiteColor,\r\n          blackColor: blackColor,\r\n          darkMode: darkMode,\r\n          highlightLastMove: highlightLastMove\r\n        }\r\n        \r\n        const url = 'https://nf6.io/add';\r\n    \r\n        const req = new XMLHttpRequest();\r\n    \r\n        req.open('POST',url,true);\r\n        req.setRequestHeader('Content-Type', 'application/json');\r\n    \r\n        req.onload = () => {\r\n          if(req.readyState === 4) {\r\n            if(req.status === 200) {\r\n              let response = JSON.parse(req.response)\r\n              console.log(response);\r\n              this.props.handleOtherChange(response.id,'fetchedID');\r\n              this.props.localSetter(response,'created');\r\n            } else {\r\n              console.warn(`There be errors about here`);\r\n            }\r\n          }\r\n        }\r\n\r\n        req.send(JSON.stringify(body));\r\n    }\r\n}\r\n \r\nexport default Controls;","import React, { Component } from 'react';\r\n\r\nclass Messages extends Component {\r\n    state = {  }\r\n    render() { \r\n        return (\r\n        <div className=\"messageContainer\">\r\n            {!this.props.fetchedID && (\r\n                <div className=\"message warn\">\r\n                <span className=\"material-icons\">warning</span>\r\n                <p>\r\n                    Once you press save, you'll be given a unique URL and won't be able to change your design. <strong>Copy your URL before closing the page!</strong>\r\n                </p>\r\n                </div>\r\n            )}\r\n            {this.props.fetchedID && (\r\n                <div className=\"message success\">\r\n                    <p>\r\n                    https://nf6.io/{this.props.fetchedID}\r\n                    <button onClick={this.copyToClipboard}>\r\n                        <span className=\"material-icons\">content_copy</span>\r\n                    </button>\r\n                    </p>  \r\n                </div>\r\n            )}\r\n        </div>\r\n        );\r\n    }\r\n\r\n    copyToClipboard = () => {\r\n        if(window.navigator.clipboard){\r\n            const baseurl = \"https://nf6.io/\";\r\n            const url = (baseurl+this.props.fetchedID);\r\n            window.navigator.clipboard.writeText(url).then(() => {\r\n                console.log(`Wrote to clipboard: ${url}`);\r\n            });\r\n        }\r\n    }\r\n}\r\n \r\nexport default Messages;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Chess from 'chess.js';\r\nimport Controls from './components/controls';\r\nimport Messages from './components/messages';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport generator from './resources/generator' ;\r\n\r\nclass App extends Component {\r\n  state = {\r\n    darkMode: false,\r\n    whiteColor: \"#81ebfd\",\r\n    blackColor: \"#d24b4b\",\r\n    highlightLastMove: true\r\n\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      \r\n      <div className=\"wrapper\">\r\n        {this.state.fetchedGame && this.state.white && this.state.black &&\r\n          <h1>\r\n            {this.state.white} vs {this.state.black}\r\n            {this.state.result && <span className='score'>{\" \" + this.state.result}</span>}\r\n          </h1>\r\n        }\r\n        <p id=\"date\"></p>\r\n        <canvas width=\"560\" height=\"560\"\r\n          style={{\r\n            transform: this.state.flipped ? \"rotate(180deg)\" : \"\"\r\n          }}\r\n        ></canvas>\r\n        \r\n        {this.state.fetchedGame &&\r\n        <p id=\"pgn\">{this.chess.history().map((elem,i) => {\r\n          if(i%2 === 0) {\r\n            return <><b>{Math.ceil(i/2)+1 + \". \"}</b><>{elem + \" \"}</></>;\r\n          } else {\r\n            return <>{elem + \" \"}</>;\r\n          }\r\n        })}</p>}\r\n\r\n        {(!this.state.fetchedGame && !this.state.fetchingGame) &&\r\n        <Controls\r\n          chess={this.chess}\r\n          handlePGN={this.handlePGN}\r\n          handleOtherChange={this.handleOtherChange}\r\n          fetchedID={this.state.fetchedID}\r\n          whiteColor={this.state.whiteColor}\r\n          blackColor={this.state.blackColor}\r\n          darkMode={this.state.darkMode}\r\n          highlightLastMove={this.state.highlightLastMove}\r\n          localSetter={this.localSetter}\r\n        />}\r\n        {(!this.state.fetchedGame && !this.state.fetchingGame) && (\r\n          <Messages\r\n            fetchedID={this.state.fetchedID}\r\n          />\r\n        )}\r\n        <ToastContainer />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  chess = new Chess();\r\n\r\n  files = {\r\n    a:0,\r\n    b:1,\r\n    c:2,\r\n    d:3,\r\n    e:4,\r\n    f:5,\r\n    g:6,\r\n    h:7\r\n}\r\n\r\nsquareColors = {\r\n  normal: {\r\n    darkSquare: \"#888\",\r\n    lightSquare: \"#eee\"\r\n  },\r\n  dark: {\r\n    darkSquare: \"#000\",\r\n    lightSquare: \"#4a4a4a\"\r\n  }\r\n}\r\n\r\n  componentDidMount = () => {\r\n    this.canvas = document.querySelector('canvas');\r\n    this.ctx = this.canvas.getContext('2d');\r\n\r\n    this.square = this.canvas.width/8;\r\n    this.ctx.lineWidth = this.square*0.065;\r\n    this.ctx.lineCap = \"round\";\r\n\r\n    generator.fillBoard(this.state.darkMode,this.ctx,this.canvas);\r\n\r\n    document.chess = this.chess;\r\n\r\n    const path = window.location.pathname.slice(1);\r\n    if(path) {\r\n      let localViewed = this.localGetter(path,'viewed')[0];\r\n      let localCreated = this.localGetter(path,'created')[0]\r\n      if(localViewed || localCreated) {\r\n        console.log(\"Found local game!\");\r\n        this.loadGame(localViewed ? localViewed : localCreated);\r\n        return localViewed ? localViewed : localCreated;\r\n      } else {\r\n        console.log('fetching');\r\n        this.setState({\r\n          fetchingGame: true\r\n        },() => {\r\n          this.fetchFromServer(path);\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  loadGame = (json) => {\r\n    if(json.err) {\r\n      return this.error(\"Couldn't find a game with that ID!\");\r\n    }\r\n    console.log(json);\r\n    this.chess.load_pgn(json.pgn);\r\n    let headers = this.chess.header();\r\n    this.setState({\r\n    fetchedGame: json,\r\n    blackColor: json.blackColor,\r\n    whiteColor: json.whiteColor,\r\n    pgn: json.pgn,\r\n    white: headers.White,\r\n    black: headers.Black,\r\n    result: headers.Result,\r\n    darkMode: json.darkMode,\r\n    highlightLastMove: json.highlightLastMove,\r\n    fetchingGame: false,\r\n    }, () => {\r\n      generator.updateBoard(this.ctx,this.chess,this.canvas,this.state.whiteColor,this.state.blackColor,this.state.darkMode,this.state.highlightLastMove);\r\n      if(!this.localGetter(json,'viewed')) {\r\n        this.localSetter(json,'viewed');\r\n      }\r\n    });\r\n  }\r\n//\r\n  fetchFromServer = (path) => {\r\n    fetch('https://nf6.io/game/'+path)\r\n    .then(res => res.json())\r\n    .then(json => this.loadGame(json))\r\n    .catch(err => {\r\n      this.error(\"Couldn't find a game with that ID!\");\r\n    });\r\n  }\r\n\r\nhandlePGN = (value) => {\r\n    const res = this.chess.load_pgn(value);\r\n\r\n    if(res) {\r\n      this.setState({\r\n        pgn: value\r\n      }, () => {\r\n        generator.updateBoard(this.ctx,this.chess,this.canvas,this.state.whiteColor,this.state.blackColor,this.state.darkMode,this.state.highlightLastMove);\r\n      });\r\n    }\r\n  }\r\n\r\n  handleOtherChange = (value,target,callback=null) => {\r\n    this.setState({\r\n      [target]: value\r\n    }, () => {\r\n      if(callback) {\r\n        callback();\r\n      }\r\n      generator.updateBoard(this.ctx,this.chess,this.canvas,this.state.whiteColor,this.state.blackColor,this.state.darkMode,this.state.highlightLastMove);\r\n    });\r\n  }\r\n\r\n  error = (message) => {\r\n    toast.error(message, {\r\n      position: \"bottom-center\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n    });\r\n  }\r\n\r\n  localGetter = (id,target) => {\r\n    const local = JSON.parse(window.localStorage.getItem(target));\r\n    if(local) {\r\n      return local.filter(obj => obj.id === id);\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  localSetter = (obj,target) => {\r\n    if(window.localStorage.getItem(target) === null) {\r\n      window.localStorage.setItem(target,'[]');\r\n    }\r\n\r\n    let local = JSON.parse(window.localStorage.getItem(target));\r\n    local.push(obj);\r\n    window.localStorage.setItem(target,JSON.stringify(local));\r\n\r\n    console.log(`Added ${obj.id} to local storage: ${target}`);\r\n  }\r\n\r\n}\r\n \r\nexport default App;\r\n\r\n/** The Reacty Way\r\n * Accept PGN input and load it into this.chess, then this.state.pgn to value\r\n * In callback, call this.drawLines(), which should operate agnostic to input so you can call it whenever ANYTHING changes (colors or PGN).\r\n * \r\n * Sample \r\n */","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals","const fillBoard = (darkMode,ctx,canvas) => {\r\n\r\n    const square = canvas.width/8;\r\n    ctx.lineWidth = square*0.065;\r\n    ctx.lineCap = \"round\";\r\n\r\n    let rank = 1;\r\n    while(rank < 9) {\r\n        let file = 0;\r\n        while(file < 8) {\r\n            if(rank % 2 !== 0) {\r\n                if(file % 2 === 0) {\r\n                    ctx.fillStyle = darkMode ? squareColors.dark.darkSquare : squareColors.normal.darkSquare;\r\n                    ctx.fillRect(file*square,canvas.width-(square*rank),square,square);\r\n                } else {\r\n                    ctx.fillStyle = darkMode ? squareColors.dark.lightSquare : squareColors.normal.lightSquare;\r\n                    ctx.fillRect(file*square,canvas.width-(square*rank),square,square);\r\n                }\r\n            } else {\r\n                if(file % 2 !== 0) {\r\n                    ctx.fillStyle = darkMode ? squareColors.dark.darkSquare : squareColors.normal.darkSquare;\r\n                    ctx.fillRect(file*square,canvas.width-(square*rank),square,square);\r\n                } else {\r\n                    ctx.fillStyle = darkMode ? squareColors.dark.lightSquare : squareColors.normal.lightSquare;\r\n                    ctx.fillRect(file*square,canvas.width-(square*rank),square,square);\r\n                }\r\n            }\r\n            file++;\r\n        }\r\n        rank++;\r\n    }\r\n}\r\n\r\nconst updateBoard = (ctx,chess,canvas,whiteColor,blackColor,darkMode,highlightLastMove) => {\r\n    ctx.clearRect(0,0,canvas.width,canvas.height);\r\n    fillBoard(darkMode,ctx,canvas);\r\n    \r\n    const history = chess.history({verbose:true});\r\n  \r\n    let moves = [];\r\n  \r\n    history.forEach(move => {\r\n      let fromTo = {\r\n          from: move.from,\r\n          to: move.to,\r\n          color: move.color\r\n      }\r\n      let addTo = [];\r\n      addTo.push(fromTo);\r\n  \r\n      moves = moves.concat(addTo);\r\n  \r\n    });\r\n    \r\n    const square = canvas.width/8;\r\n\r\n    moves.forEach((move,i) => {\r\n\r\n        let from = move.from;\r\n        let to = move.to;\r\n        \r\n        let fromFile = from[0];\r\n        let fromRank = parseInt(from[1])-1;\r\n        let fromFileNum = files[fromFile];\r\n        \r\n        let fromCoords = {\r\n            x: (square/2)+(square*fromFileNum),\r\n            y: canvas.width-square/2 - (square*fromRank)\r\n        }\r\n  \r\n        let toFile = to[0];\r\n        let toRank = parseInt(to[1])-1;\r\n        let toFileNum = files[toFile];\r\n  \r\n        let toCoords = {\r\n            x: (square/2)+(square*toFileNum),\r\n            y: canvas.width-(square/2) - (square*toRank)\r\n        };\r\n        \r\n        drawPath(ctx,whiteColor,blackColor,fromCoords,toCoords,move.color);\r\n  \r\n        if(i === moves.length-1 && highlightLastMove) {\r\n          ctx.beginPath();\r\n          ctx.arc(toCoords.x,toCoords.y,square/8,0,2*Math.PI);\r\n          ctx.stroke();\r\n        }\r\n    });\r\n    \r\n}\r\n\r\nconst drawPath = (ctx,whiteColor,blackColor,from,to,color) => {\r\n\r\n    ctx.beginPath();\r\n    ctx.strokeStyle = (color === 'w' ? whiteColor : blackColor);\r\n    ctx.moveTo(from.x,from.y);\r\n    ctx.lineTo(to.x,to.y);\r\n    ctx.stroke();\r\n\r\n}\r\n\r\n\r\nconst files = {\r\n    a:0,\r\n    b:1,\r\n    c:2,\r\n    d:3,\r\n    e:4,\r\n    f:5,\r\n    g:6,\r\n    h:7\r\n}\r\n\r\nconst squareColors = {\r\n    normal: {\r\n      darkSquare: \"#888\",\r\n      lightSquare: \"#eee\"\r\n    },\r\n    dark: {\r\n      darkSquare: \"#000\",\r\n      lightSquare: \"#4a4a4a\"\r\n    }\r\n}\r\n\r\nmodule.exports.updateBoard = updateBoard;\r\nmodule.exports.fillBoard = fillBoard;"],"sourceRoot":""}