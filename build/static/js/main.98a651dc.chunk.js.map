{"version":3,"sources":["components/controls.jsx","components/messages.jsx","App.js","index.js"],"names":["Controls","state","saveToServer","document","querySelector","disabled","body","pgn","props","chess","whiteColor","blackColor","darkMode","highlightLastMove","req","XMLHttpRequest","open","setRequestHeader","onload","readyState","status","response","JSON","parse","console","log","handleOtherChange","id","warn","send","stringify","className","cols","rows","placeholder","onChange","e","handlePGN","target","value","htmlFor","this","type","defaultChecked","checked","onClick","Component","Messages","copyToClipboard","window","navigator","clipboard","url","fetchedID","writeText","then","App","Chess","files","a","b","c","d","f","g","h","squareColors","normal","darkSquare","lightSquare","dark","componentDidMount","canvas","ctx","getContext","square","width","lineWidth","lineCap","fillBoard","path","location","pathname","slice","fetchFromServer","fetch","res","json","setState","fetchedGame","load_pgn","updateBoard","catch","err","error","rank","file","fillStyle","fillRect","height","drawPath","from","to","color","beginPath","strokeStyle","moveTo","x","y","lineTo","stroke","clearRect","history","verbose","moves","forEach","move","fromTo","addTo","push","concat","i","fromFile","fromRank","parseInt","fromFileNum","fromCoords","toFile","toRank","toFileNum","toCoords","length","arc","Math","PI","h1","header","t","ceil","trim","innerHTML","White","Black","Result","Date","innerText","callback","message","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","style","transform","flipped","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.98a651dc.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Controls extends Component {\r\n    state = {  }\r\n    render() { \r\n        return (\r\n            <div className=\"controls\">\r\n                <textarea id=\"importGame\" cols=\"30\" rows=\"10\" placeholder=\"Input PGN\"\r\n                            onChange={(e) => {this.props.handlePGN(e.target.value)}}\r\n                        ></textarea>\r\n                <div className=\"row\">\r\n                    <label htmlFor=\"whiteColor\">\r\n                    White Color\r\n                    <input value={this.props.whiteColor} type=\"color\" onChange={(e) => {this.props.handleOtherChange(e.target.value,'whiteColor')}}></input>\r\n                    </label>\r\n                    <label htmlFor=\"blackColor\">\r\n                    Black color\r\n                    <input value={this.props.blackColor} type=\"color\" onChange={(e) => {this.props.handleOtherChange(e.target.value,'blackColor')}}></input>\r\n                    </label>\r\n                    <label className=\"full\">\r\n                    Dark mode?\r\n                    <label className=\"switch\">\r\n                        <input type=\"checkbox\" defaultChecked={this.props.darkMode} onChange={(e) => {this.props.handleOtherChange(e.target.checked,'darkMode')}} />\r\n                        <span className=\"slider round\"></span>\r\n                    </label>\r\n                    </label>\r\n                    <label className=\"full\">\r\n                    Highlight Last move?\r\n                    <label className=\"switch\">\r\n                        <input type=\"checkbox\" defaultChecked={this.props.highlightLastMove} onChange={(e) => {this.props.handleOtherChange(e.target.checked,'highlightLastMove')}} />\r\n                        <span className=\"slider round\"></span>\r\n                    </label>\r\n                    </label>\r\n                </div>\r\n                <div>\r\n                    <button className=\"saveButton\" onClick={this.saveToServer}>\r\n                        Save design!\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n    saveToServer = () => {\r\n        let saveButton = document.querySelector('.saveButton');\r\n        saveButton.disabled = true;\r\n        const pgn = this.props.chess.pgn();\r\n        const whiteColor = this.props.whiteColor;\r\n        const blackColor = this.props.blackColor;\r\n        const darkMode = this.props.darkMode ? 1 : 0;\r\n        const highlightLastMove = this.props.highlightLastMove ? 1 : 0;\r\n    \r\n        let body = {\r\n          pgn: pgn,\r\n          whiteColor: whiteColor,\r\n          blackColor: blackColor,\r\n          darkMode: darkMode,\r\n          highlightLastMove: highlightLastMove\r\n        }\r\n    \r\n        const url = `https://api.nf6.io/`;\r\n    \r\n        const req = new XMLHttpRequest();\r\n    \r\n        req.open('POST',url,true);\r\n        req.setRequestHeader('Content-Type', 'application/json');\r\n    \r\n        req.onload = () => {\r\n          if(req.readyState === 4) {\r\n            if(req.status === 200) {\r\n              let response = JSON.parse(req.response)\r\n              console.log(response);\r\n              this.props.handleOtherChange(response.id,'fetchedID');\r\n            } else {\r\n              console.warn(`There be errors about here`);\r\n            }\r\n          }\r\n        }\r\n\r\n        req.send(JSON.stringify(body));\r\n    }\r\n}\r\n \r\nexport default Controls;","import React, { Component } from 'react';\r\n\r\nclass Messages extends Component {\r\n    state = {  }\r\n    render() { \r\n        return (\r\n        <div className=\"messageContainer\">\r\n            {!this.props.fetchedID && (\r\n                <div className=\"message warn\">\r\n                <span className=\"material-icons\">warning</span>\r\n                <p>\r\n                    Once you press save, you'll be given a unique URL and won't be able to change your design. <strong>Copy your URL before closing the page!</strong>\r\n                </p>\r\n                </div>\r\n            )}\r\n            {this.props.fetchedID && (\r\n                <div className=\"message success\">\r\n                    <p>\r\n                    https://nf6.io/{this.props.fetchedID}\r\n                    <button onClick={this.copyToClipboard}>\r\n                        <span className=\"material-icons\">content_copy</span>\r\n                    </button>\r\n                    </p>  \r\n                </div>\r\n            )}\r\n        </div>\r\n        );\r\n    }\r\n\r\n    copyToClipboard = () => {\r\n        if(window.navigator.clipboard){\r\n            const baseurl = \"https://nf6.io/\";\r\n            const url = (baseurl+this.props.fetchedID);\r\n            window.navigator.clipboard.writeText(url).then(() => {\r\n                console.log(`Wrote to clipboard: ${url}`);\r\n            });\r\n        }\r\n    }\r\n}\r\n \r\nexport default Messages;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Chess from 'chess.js';\r\nimport Controls from './components/controls';\r\nimport Messages from './components/messages';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    darkMode: false,\r\n    whiteColor: \"#81ebfd\",\r\n    blackColor: \"#d24b4b\",\r\n    highlightLastMove: true\r\n\r\n  }\r\n\r\n  render() { \r\n    return (\r\n      \r\n      <div className=\"wrapper\">\r\n        <h1></h1>\r\n        <p id=\"date\"></p>\r\n        <canvas width=\"560\" height=\"560\"\r\n          style={{\r\n            transform: this.state.flipped ? \"rotate(180deg)\" : \"\"\r\n          }}\r\n        ></canvas>\r\n        <p id=\"pgn\"></p>\r\n        {!this.state.fetchedGame &&\r\n        <Controls\r\n          chess={this.chess}\r\n          handlePGN={this.handlePGN}\r\n          handleOtherChange={this.handleOtherChange}\r\n          fetchedID={this.state.fetchedID}\r\n          whiteColor={this.state.whiteColor}\r\n          blackColor={this.state.blackColor}\r\n          darkMode={this.state.darkMode}\r\n          highlightLastMove={this.state.highlightLastMove}\r\n        />}\r\n        {!this.state.fetchedGame && (\r\n          <Messages\r\n            fetchedID={this.state.fetchedID}\r\n          />\r\n        )}\r\n        <ToastContainer />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  chess = new Chess();\r\n\r\n  files = {\r\n    a:0,\r\n    b:1,\r\n    c:2,\r\n    d:3,\r\n    e:4,\r\n    f:5,\r\n    g:6,\r\n    h:7\r\n}\r\n\r\nsquareColors = {\r\n  normal: {\r\n    darkSquare: \"#888\",\r\n    lightSquare: \"#eee\"\r\n  },\r\n  dark: {\r\n    darkSquare: \"#000\",\r\n    lightSquare: \"#4a4a4a\"\r\n  }\r\n}\r\n\r\n  componentDidMount = () => {\r\n    this.canvas = document.querySelector('canvas');\r\n    this.ctx = this.canvas.getContext('2d');\r\n\r\n    this.square = this.canvas.width/8;\r\n    this.ctx.lineWidth = this.square*0.065;\r\n    this.ctx.lineCap = \"round\";\r\n\r\n    this.fillBoard();\r\n\r\n    document.chess = this.chess;\r\n\r\n    const path = window.location.pathname.slice(1);\r\n    if(path) {\r\n      this.fetchFromServer(path);\r\n    }\r\n\r\n  }\r\n\r\n  fetchFromServer = (path) => {\r\n    fetch('https://api.nf6.io'+path)\r\n    .then(res => {\r\n        return res.json();\r\n    })\r\n    .then(json => {\r\n        this.setState({\r\n        fetchedGame: json,\r\n        blackColor: json.blackColor,\r\n        whiteColor: json.whiteColor,\r\n        pgn: json.pgn,\r\n        darkMode: json.darkMode,\r\n        highlightLastMove: json.highlightLastMove\r\n        }, () => {\r\n        this.chess.load_pgn(this.state.pgn);\r\n        this.updateBoard();\r\n        });\r\n    })\r\n    .catch(err => {\r\n      this.error(\"Couldn't find a game with that ID!\");\r\n    });\r\n  }\r\n\r\n\r\n  fillBoard = () => {\r\n    let rank = 1;\r\n    while(rank < 9) {\r\n        let file = 0;\r\n        while(file < 8) {\r\n            if(rank % 2 !== 0) {\r\n                if(file % 2 === 0) {\r\n                    this.ctx.fillStyle = this.state.darkMode ? this.squareColors.dark.darkSquare : this.squareColors.normal.darkSquare;\r\n                    this.ctx.fillRect(file*this.square,this.canvas.height-(this.square*rank),this.square,this.square);\r\n                } else {\r\n                    this.ctx.fillStyle = this.state.darkMode ? this.squareColors.dark.lightSquare : this.squareColors.normal.lightSquare;\r\n                    this.ctx.fillRect(file*this.square,this.canvas.height-(this.square*rank),this.square,this.square);\r\n                }\r\n            } else {\r\n                if(file % 2 !== 0) {\r\n                    this.ctx.fillStyle = this.state.darkMode ? this.squareColors.dark.darkSquare : this.squareColors.normal.darkSquare;\r\n                    this.ctx.fillRect(file*this.square,this.canvas.height-(this.square*rank),this.square,this.square);\r\n                } else {\r\n                    this.ctx.fillStyle = this.state.darkMode ? this.squareColors.dark.lightSquare : this.squareColors.normal.lightSquare;\r\n                    this.ctx.fillRect(file*this.square,this.canvas.height-(this.square*rank),this.square,this.square);\r\n                }\r\n            }\r\n            file++;\r\n        }\r\n        rank++;\r\n    }\r\n}\r\n\r\ndrawPath = (from,to,color) => {\r\n\r\n  this.ctx.beginPath();\r\n\r\n  this.ctx.strokeStyle = (color === 'w' ? this.state.whiteColor : this.state.blackColor);\r\n  this.ctx.moveTo(from.x,from.y);\r\n  this.ctx.lineTo(to.x,to.y);\r\n  this.ctx.stroke();\r\n}\r\n\r\nupdateBoard = () => {\r\n  this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);\r\n  this.fillBoard();\r\n  \r\n  const history = this.chess.history({verbose:true});\r\n\r\n  let moves = [];\r\n\r\n  history.forEach(move => {\r\n    let fromTo = {\r\n        from: move.from,\r\n        to: move.to,\r\n        color: move.color\r\n    }\r\n    let addTo = [];\r\n    addTo.push(fromTo);\r\n\r\n    moves = moves.concat(addTo);\r\n\r\n  });\r\n\r\n  moves.forEach((move,i) => {\r\n      let from = move.from;\r\n      let to = move.to;\r\n      \r\n      let fromFile = from[0];\r\n      let fromRank = parseInt(from[1])-1;\r\n      let fromFileNum = this.files[fromFile];\r\n      \r\n      let fromCoords = {\r\n          x: (this.square/2)+(this.square*fromFileNum),\r\n          y: this.canvas.height-this.square/2 - (this.square*fromRank)\r\n      }\r\n\r\n      let toFile = to[0];\r\n      let toRank = parseInt(to[1])-1;\r\n      let toFileNum = this.files[toFile];\r\n\r\n      let toCoords = {\r\n          x: (this.square/2)+(this.square*toFileNum),\r\n          y: this.canvas.height-(this.square/2) - (this.square*toRank)\r\n      };\r\n      \r\n      this.drawPath(fromCoords,toCoords,move.color);\r\n\r\n      if(i === moves.length-1 && this.state.highlightLastMove) {\r\n        this.ctx.beginPath();\r\n        this.ctx.arc(toCoords.x,toCoords.y,this.square/8,0,2*Math.PI);\r\n        this.ctx.stroke();\r\n      }\r\n  });\r\n  \r\n\r\n  let h1 = document.querySelector('h1');\r\n  let header = this.chess.header();\r\n\r\n  let pgn = \"\";\r\n  (this.chess.history()).forEach((t,i) => {\r\n      if(i % 2 === 0) {\r\n          pgn += (\"<b>\" + (Math.ceil(i/2)+1) + \".</b>&nbsp;\");\r\n      }\r\n  \r\n      pgn += t + \" \";\r\n  });\r\n  pgn.trim();\r\n\r\n  const pgnPlace = document.querySelector('#pgn');\r\n  pgnPlace.innerHTML = pgn;\r\n\r\n  if(header.White && header.Black) {\r\n      h1.innerHTML = `${header.White} vs ${header.Black}${header.Result ? \" <span class='score'>\" + header.Result + \"</span>\": \"\"}`;\r\n\r\n      if(header.Date) {\r\n          let date = document.querySelector('#date');\r\n          date.innerText = `${header.Date}`;\r\n      }\r\n  }\r\n}\r\n\r\nhandlePGN = (value) => {\r\n    const res = this.chess.load_pgn(value);\r\n\r\n    if(res) {\r\n      this.setState({\r\n        pgn: value\r\n      }, () => {\r\n        this.updateBoard();\r\n      });\r\n    }\r\n  }\r\n\r\n  handleOtherChange = (value,target,callback=null) => {\r\n    this.setState({\r\n      [target]: value\r\n    }, () => {\r\n      if(callback) {\r\n        callback();\r\n      }\r\n      this.updateBoard();\r\n    });\r\n  }\r\n\r\n  error = (message) => {\r\n    toast.error(message, {\r\n      position: \"bottom-center\",\r\n      autoClose: 5000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      progress: undefined,\r\n    });\r\n  }\r\n}\r\n \r\nexport default App;\r\n\r\n/** The Reacty Way\r\n * Accept PGN input and load it into this.chess, then this.state.pgn to value\r\n * In callback, call this.drawLines(), which should operate agnostic to input so you can call it whenever ANYTHING changes (colors or PGN).\r\n * \r\n * Sample \r\n */","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}